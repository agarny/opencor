diff --git lib/matplotlib/backends/backend_qt.py lib/matplotlib/backends/backend_qt.py
index 4b3783bc87..ee9afc2be2 100644
--- lib/matplotlib/backends/backend_qt.py
+++ lib/matplotlib/backends/backend_qt.py
@@ -14,14 +14,14 @@ import matplotlib.backends.qt_editor.figureoptions as figureoptions
 from . import qt_compat
 from .qt_compat import (
     QtCore, QtGui, QtWidgets, __version__, QT_API,
-    _to_int, _isdeleted, _maybe_allow_interrupt
+    _to_int, _maybe_allow_interrupt
 )
 
 
 # SPECIAL_KEYS are Qt::Key that do *not* return their Unicode name
 # instead they have manually specified names.
 SPECIAL_KEYS = {
-    _to_int(getattr(QtCore.Qt.Key, k)): v for k, v in [
+    _to_int(getattr(QtCore.Qt, k)): v for k, v in [
         ("Key_Escape", "escape"),
         ("Key_Tab", "tab"),
         ("Key_Backspace", "backspace"),
@@ -66,8 +66,8 @@ SPECIAL_KEYS = {
 # Elements are (Qt::KeyboardModifiers, Qt::Key) tuples.
 # Order determines the modifier order (ctrl+alt+...) reported by Matplotlib.
 _MODIFIER_KEYS = [
-    (_to_int(getattr(QtCore.Qt.KeyboardModifier, mod)),
-     _to_int(getattr(QtCore.Qt.Key, key)))
+    (_to_int(getattr(QtCore.Qt, mod)),
+     _to_int(getattr(QtCore.Qt, key)))
     for mod, key in [
         ("ControlModifier", "Key_Control"),
         ("AltModifier", "Key_Alt"),
@@ -76,7 +76,7 @@ _MODIFIER_KEYS = [
     ]
 ]
 cursord = {
-    k: getattr(QtCore.Qt.CursorShape, v) for k, v in [
+    k: getattr(QtCore.Qt, v) for k, v in [
         (cursors.MOVE, "SizeAllCursor"),
         (cursors.HAND, "PointingHandCursor"),
         (cursors.POINTER, "ArrowCursor"),
@@ -107,7 +107,7 @@ def _create_qApp():
         if QT_API in {'PyQt6', 'PySide6'}:
             other_bindings = ('PyQt5', 'PySide2')
             qt_version = 6
-        elif QT_API in {'PyQt5', 'PySide2'}:
+        elif QT_API in {'PyQt5', 'PySide2', 'PythonQt'}:
             other_bindings = ('PyQt6', 'PySide6')
             qt_version = 5
         else:
@@ -132,7 +132,7 @@ def _create_qApp():
                 pass
         try:
             QtWidgets.QApplication.setHighDpiScaleFactorRoundingPolicy(
-                QtCore.Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)
+                QtCore.Qt.PassThrough)
         except AttributeError:  # Only for Qt>=5.14.
             pass
         app = QtWidgets.QApplication(["matplotlib"])
@@ -158,12 +158,6 @@ class TimerQT(TimerBase):
         self._timer.timeout.connect(self._on_timer)
         super().__init__(*args, **kwargs)
 
-    def __del__(self):
-        # The check for deletedness is needed to avoid an error at animation
-        # shutdown with PySide2.
-        if not _isdeleted(self._timer):
-            self._timer_stop()
-
     def _timer_set_single_shot(self):
         self._timer.setSingleShot(self._single)
 
@@ -183,7 +177,7 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
     manager_class = _api.classproperty(lambda cls: FigureManagerQT)
 
     buttond = {
-        getattr(QtCore.Qt.MouseButton, k): v for k, v in [
+        getattr(QtCore.Qt, k): v for k, v in [
             ("LeftButton", MouseButton.LEFT),
             ("RightButton", MouseButton.RIGHT),
             ("MiddleButton", MouseButton.MIDDLE),
@@ -201,7 +195,7 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
         self._draw_rect_callback = lambda painter: None
         self._in_resize_event = False
 
-        self.setAttribute(QtCore.Qt.WidgetAttribute.WA_OpaquePaintEvent)
+        self.setAttribute(QtCore.Qt.WA_OpaquePaintEvent)
         self.setMouseTracking(True)
         self.resize(*self.get_width_height())
 
@@ -498,9 +492,17 @@ class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
 class MainWindow(QtWidgets.QMainWindow):
     closing = QtCore.Signal()
 
+    def __init__(self):
+        QtWidgets.QMainWindow.__init__(self)
+        self._closeCallbacks = []
+
+    def connectClosing(self, callback):
+        self._closeCallbacks.append(callback)
+
     def closeEvent(self, event):
-        self.closing.emit()
-        super().closeEvent(event)
+        for callback in self._closeCallbacks:
+            callback()
+        QtWidgets.QMainWindow.closeEvent(self, event)
 
 
 class FigureManagerQT(FigureManagerBase):
@@ -520,6 +522,7 @@ class FigureManagerQT(FigureManagerBase):
     def __init__(self, canvas, num):
         self.window = MainWindow()
         super().__init__(canvas, num)
+        self.window.setAttribute(QtCore.Qt.WA_DeleteOnClose)
         self.window.closing.connect(self._widgetclosed)
 
         if sys.platform != "darwin":
@@ -552,7 +555,7 @@ class FigureManagerQT(FigureManagerBase):
         # StrongFocus accepts both tab and click to focus and will enable the
         # canvas to process event without clicking.
         # https://doc.qt.io/qt-5/qt.html#FocusPolicy-enum
-        self.canvas.setFocusPolicy(QtCore.Qt.FocusPolicy.StrongFocus)
+        self.canvas.setFocusPolicy(QtCore.Qt.StrongFocus)
         self.canvas.setFocus()
 
         self.window.raise_()
@@ -632,8 +635,8 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
         """coordinates: should we show the coordinates on the right?"""
         QtWidgets.QToolBar.__init__(self, parent)
         self.setAllowedAreas(QtCore.Qt.ToolBarArea(
-            _to_int(QtCore.Qt.ToolBarArea.TopToolBarArea) |
-            _to_int(QtCore.Qt.ToolBarArea.BottomToolBarArea)))
+            _to_int(QtCore.Qt.TopToolBarArea) |
+            _to_int(QtCore.Qt.BottomToolBarArea)))
         self.coordinates = coordinates
         self._actions = {}  # mapping of toolitem method names to QActions.
         self._subplot_dialog = None
@@ -656,12 +659,12 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
         if self.coordinates:
             self.locLabel = QtWidgets.QLabel("", self)
             self.locLabel.setAlignment(QtCore.Qt.AlignmentFlag(
-                _to_int(QtCore.Qt.AlignmentFlag.AlignRight) |
-                _to_int(QtCore.Qt.AlignmentFlag.AlignVCenter)))
+                _to_int(QtCore.Qt.AlignRight) |
+                _to_int(QtCore.Qt.AlignVCenter)))
 
             self.locLabel.setSizePolicy(QtWidgets.QSizePolicy(
-                QtWidgets.QSizePolicy.Policy.Expanding,
-                QtWidgets.QSizePolicy.Policy.Ignored,
+                QtWidgets.QSizePolicy.Expanding,
+                QtWidgets.QSizePolicy.Ignored,
             ))
             labelAction = self.addWidget(self.locLabel)
             labelAction.setVisible(True)
@@ -687,7 +690,7 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             icon_color = self.palette().color(self.foregroundRole())
             mask = pm.createMaskFromColor(
                 QtGui.QColor('black'),
-                QtCore.Qt.MaskMode.MaskOutColor)
+                QtCore.Qt.MaskOutColor)
             pm.fill(icon_color)
             pm.setMask(mask)
         return QtGui.QIcon(pm)
@@ -791,8 +794,8 @@ class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
             except Exception as e:
                 QtWidgets.QMessageBox.critical(
                     self, "Error saving file", str(e),
-                    QtWidgets.QMessageBox.StandardButton.Ok,
-                    QtWidgets.QMessageBox.StandardButton.NoButton)
+                    QtWidgets.QMessageBox.Ok,
+                    QtWidgets.QMessageBox.NoButton)
 
     def set_history_buttons(self):
         can_backward = self._nav_stack._pos > 0
@@ -906,15 +909,15 @@ class ToolbarQt(ToolContainerBase, QtWidgets.QToolBar):
         ToolContainerBase.__init__(self, toolmanager)
         QtWidgets.QToolBar.__init__(self, parent)
         self.setAllowedAreas(QtCore.Qt.ToolBarArea(
-            _to_int(QtCore.Qt.ToolBarArea.TopToolBarArea) |
-            _to_int(QtCore.Qt.ToolBarArea.BottomToolBarArea)))
+            _to_int(QtCore.Qt.TopToolBarArea) |
+            _to_int(QtCore.Qt.BottomToolBarArea)))
         message_label = QtWidgets.QLabel("")
         message_label.setAlignment(QtCore.Qt.AlignmentFlag(
-            _to_int(QtCore.Qt.AlignmentFlag.AlignRight) |
-            _to_int(QtCore.Qt.AlignmentFlag.AlignVCenter)))
+            _to_int(QtCore.Qt.AlignRight) |
+            _to_int(QtCore.Qt.AlignVCenter)))
         message_label.setSizePolicy(QtWidgets.QSizePolicy(
-            QtWidgets.QSizePolicy.Policy.Expanding,
-            QtWidgets.QSizePolicy.Policy.Ignored,
+            QtWidgets.QSizePolicy.Expanding,
+            QtWidgets.QSizePolicy.Ignored,
         ))
         self._message_action = self.addWidget(message_label)
         self._toolitems = {}
@@ -1019,4 +1022,6 @@ class _BackendQT(_Backend):
     backend_version = __version__
     FigureCanvas = FigureCanvasQT
     FigureManager = FigureManagerQT
-    mainloop = FigureManagerQT.start_main_loop
+    # PythonQt is already running the event loop
+    if QT_API != "PythonQt":
+        mainloop = FigureManagerQT.start_main_loop
diff --git lib/matplotlib/backends/backend_qtagg.py lib/matplotlib/backends/backend_qtagg.py
index 256e50a3d1..4dd5463bb9 100644
--- lib/matplotlib/backends/backend_qtagg.py
+++ lib/matplotlib/backends/backend_qtagg.py
@@ -4,6 +4,8 @@ Render to qt from agg.
 
 import ctypes
 
+from qimage2ndarray import array2qimage
+
 from matplotlib.transforms import Bbox
 
 from .qt_compat import QT_API, QtCore, QtGui
@@ -55,10 +57,11 @@ class FigureCanvasQTAgg(FigureCanvasAgg, FigureCanvasQT):
             else:
                 ptr = buf
 
-            painter.eraseRect(rect)  # clear the widget canvas
-            qimage = QtGui.QImage(ptr, buf.shape[1], buf.shape[0],
-                                  QtGui.QImage.Format.Format_RGBA8888)
+            # create a QImage from the array buffer
+            qimage = array2qimage(buf)
             qimage.setDevicePixelRatio(self.device_pixel_ratio)
+            # clear the widget canvas
+            painter.eraseRect(rect)
             # set origin using original QT coordinates
             origin = QtCore.QPoint(rect.left(), rect.top())
             painter.drawImage(origin, qimage)
diff --git lib/matplotlib/backends/qt_compat.py lib/matplotlib/backends/qt_compat.py
index d587223ab9..8925c7494c 100644
--- lib/matplotlib/backends/qt_compat.py
+++ lib/matplotlib/backends/qt_compat.py
@@ -27,12 +27,14 @@ QT_API_PYQT6 = "PyQt6"
 QT_API_PYSIDE6 = "PySide6"
 QT_API_PYQT5 = "PyQt5"
 QT_API_PYSIDE2 = "PySide2"
+QT_API_PYTHONQT = "PythonQt"
 QT_API_ENV = os.environ.get("QT_API")
 if QT_API_ENV is not None:
     QT_API_ENV = QT_API_ENV.lower()
 _ETS = {  # Mapping of QT_API_ENV to requested binding.
     "pyqt6": QT_API_PYQT6, "pyside6": QT_API_PYSIDE6,
     "pyqt5": QT_API_PYQT5, "pyside2": QT_API_PYSIDE2,
+    "pythonqt": QT_API_PYTHONQT,
 }
 # First, check if anything is already imported.
 if sys.modules.get("PyQt6.QtCore"):
@@ -43,6 +45,8 @@ elif sys.modules.get("PyQt5.QtCore"):
     QT_API = QT_API_PYQT5
 elif sys.modules.get("PySide2.QtCore"):
     QT_API = QT_API_PYSIDE2
+elif sys.modules.get("PythonQt.QtCore"):
+    QT_API = QT_API_PYTHONQT
 # Otherwise, check the QT_API environment variable (from Enthought).  This can
 # only override the binding, not the backend (in other words, we check that the
 # requested backend actually matches).  Use _get_backend_or_none to avoid
@@ -104,11 +108,38 @@ def _setup_pyqt5plus():
         def _isdeleted(obj):
             return not shiboken2.isValid(obj)
         _to_int = int
+    elif QT_API == QT_API_PYTHONQT:  # try importing PythonQt
+        from PythonQt import QtCore, QtGui
+        __version__ = QtCore.qVersion()
+
+        # PythonQt does not yet support a getSaveFileName variant returning the selected filter
+        def _getSaveFileName(*args, **kwargs):
+            return (QtGui.QFileDialog.getSaveFileName(*args, **kwargs), None)
+
+        # Provide color getters
+        def getHslF(c):
+            return (c.hslHueF(), c.hslSaturationF(), c.lightnessF(), c.alphaF())
+
+        def getHsvF(c):
+            return (c.hueF(), c.saturationF(), c.valueF(), c.alphaF())
+
+        def getRgbF(c):
+            return (c.redF(), c.greenF(), c.blueF(), c.alphaF())
+
+        QtGui.QColor.getHslF = getHslF
+        QtGui.QColor.getHsvF = getHsvF
+        QtGui.QColor.getRgbF = getRgbF
+
+        # PythonQt doesn't have a separate QtWidgets module
+        QtWidgets = QtGui
+
+        _to_int = int
+
     else:
         raise AssertionError(f"Unexpected QT_API: {QT_API}")
 
 
-if QT_API in [QT_API_PYQT6, QT_API_PYQT5, QT_API_PYSIDE6, QT_API_PYSIDE2]:
+if QT_API in [QT_API_PYQT6, QT_API_PYQT5, QT_API_PYSIDE6, QT_API_PYSIDE2, QT_API_PYTHONQT]:
     _setup_pyqt5plus()
 elif QT_API is None:  # See above re: dict.__getitem__.
     if _QT_FORCE_QT5_BINDING:
@@ -136,7 +167,11 @@ elif QT_API is None:  # See above re: dict.__getitem__.
         )
 else:  # We should not get there.
     raise AssertionError(f"Unexpected QT_API: {QT_API}")
-_version_info = tuple(QtCore.QLibraryInfo.version().segments())
+
+if QT_API == QT_API_PYTHONQT:
+    _version_info = tuple(int(v) for v in __version__.split('.'))
+else:
+    _version_info = tuple(QtCore.QLibraryInfo.version().segments())
 
 
 if _version_info < (5, 12):
