def model cellml_1_0 as
    def unit my_base_unit1 as base unit;
    def unit my_base_unit2 as base unit;
    def unit my_base_unit3 as base unit;

    def unit my_unit1 as
        unit ampere;
        unit becquerel;
        unit candela;
        unit celsius;
        unit coulomb;
        unit dimensionless;
        unit farad;
        unit gram;
        unit gray;
        unit henry;
        unit hertz;
        unit joule;
        unit katal;
        unit kelvin;
        unit kilogram;
        unit liter;
        unit litre;
        unit lumen;
        unit lux;
        unit meter;
        unit metre;
        unit mole;
        unit newton;
        unit ohm;
        unit pascal;
        unit radian;
        unit second;
        unit siemens;
        unit sievert;
        unit steradian;
        unit tesla;
        unit volt;
        unit watt;
        unit weber;
    enddef;

    def unit my_unit2 as
        unit some_unit {pref: milli, expo: -1, mult: 3, off: 7};
    enddef;

    def unit my_unit3 as
        unit some_unit {pref: yotta};
        unit some_unit {pref: zetta};
        unit some_unit {pref: exa};
        unit some_unit {pref: peta};
        unit some_unit {pref: tera};
        unit some_unit {pref: giga};
        unit some_unit {pref: mega};
        unit some_unit {pref: kilo};
        unit some_unit {pref: hecto};
        unit some_unit {pref: deka};
        unit some_unit {pref: deci};
        unit some_unit {pref: centi};
        unit some_unit {pref: milli};
        unit some_unit {pref: micro};
        unit some_unit {pref: nano};
        unit some_unit {pref: milli};
        unit some_unit {pref: pico};
        unit some_unit {pref: femto};
        unit some_unit {pref: atto};
        unit some_unit {pref: zepto};
        unit some_unit {pref: yocto};
    enddef;

    def comp my_component as
        def unit my_base_unit1 as base unit;
        def unit my_base_unit2 as base unit;
        def unit my_base_unit3 as base unit;

        def unit my_unit1 as
            unit ampere;
            unit becquerel;
            unit candela;
            unit celsius;
            unit coulomb;
            unit dimensionless;
            unit farad;
            unit gram;
            unit gray;
            unit henry;
            unit hertz;
            unit joule;
            unit katal;
            unit kelvin;
            unit kilogram;
            unit liter;
            unit litre;
            unit lumen;
            unit lux;
            unit meter;
            unit metre;
            unit mole;
            unit newton;
            unit ohm;
            unit pascal;
            unit radian;
            unit second;
            unit siemens;
            unit sievert;
            unit steradian;
            unit tesla;
            unit volt;
            unit watt;
            unit weber;
        enddef;

        def unit my_unit2 as
            unit some_unit {pref: milli, expo: -1, mult: 3, off: 7};
        enddef;

        def unit my_unit3 as
            unit some_unit {pref: yotta};
            unit some_unit {pref: zetta};
            unit some_unit {pref: exa};
            unit some_unit {pref: peta};
            unit some_unit {pref: tera};
            unit some_unit {pref: giga};
            unit some_unit {pref: mega};
            unit some_unit {pref: kilo};
            unit some_unit {pref: hecto};
            unit some_unit {pref: deka};
            unit some_unit {pref: deci};
            unit some_unit {pref: centi};
            unit some_unit {pref: milli};
            unit some_unit {pref: micro};
            unit some_unit {pref: nano};
            unit some_unit {pref: milli};
            unit some_unit {pref: pico};
            unit some_unit {pref: femto};
            unit some_unit {pref: atto};
            unit some_unit {pref: zepto};
            unit some_unit {pref: yocto};
        enddef;

        var my_variable1: my_unit1;

        def unit my_base_unit4 as base unit;

        var my_variable2: my_unit2 {init: 123};

        a = b;

        var my_variable3: my_unit3 {pub: in};
        var my_variable4: my_unit4 {priv: out};
        var my_variable5: my_unit5 {pub: none, priv: none};

        def unit my_base_unit5 as base unit;

        a = 3{dimensionless};

        def unit my_base_unit6 as base unit;

        a = 12.3e5{dimensionless};

        a = sel
            case Version == 0{dimensionless}:
                123{dimensionless};
            case Version == 1{dimensionless}:
                456{dimensionless};
            otherwise:
                789{dimensionless};
        endsel;

        a         = b == c;
        a         = b <> c;
        a         = b > c;
        a         = b < c;
        a         = b >= c;
        a         = b <= c;
        a         = +b;
        a         = b+c;
        a         = b+c+d;
        a         = (b and c)+(b or c);
        a         = (b and c)+c;
        a         = b+(b or c);
        a         = -b;
        a         = -exp(b);
        a         = -(b == c);
        a         = -(b <> c);
        a         = -(b > c);
        a         = -(b < c);
        a         = -(b >= c);
        a         = -(b <= c);
        a         = -(b+c);
        a         = -(b-c);
        a         = -b*c;
        a         = -b/c;
        a         = -(b and c);
        a         = -(b or c);
        a         = -(b xor c);
        a         = -not b;
        a         = b-c;
        a         = (b and c)-(b or c);
        a         = (b and c)-c;
        a         = b-(b or c);
        a         = b-(c+d);
        a         = b-+c;
        a         = b-(c-d);
        a         = b-(-c);
        a         = b*c;
        a         = b*c*d;
        a         = (b and c)*(b or c);
        a         = (b and c)*c;
        a         = b*(b or c);
        a         = +b*-c;
        a         = +b*c;
        a         = b*-c;
        a         = +b*-c*+d;
        a         = b/c;
        a         = (b and c)/(b or c);
        a         = (b and c)/c;
        a         = b/(b or c);
        a         = +b/-c;
        a         = +b/c;
        a         = b/-c;
        a         = b/(c*d);
        a         = pow(b, c);
        a         = sqrt(b);
        a         = sqr(b);
        a         = pow(b, 3{dimensionless});
        a         = sqrt(b);
        a         = root(b, 3{dimensionless});
        a         = root(b, c);
        a         = abs(b);
        a         = exp(b);
        a         = ln(b);
        a         = log(b);
        a         = log(b, c);
        a         = ceil(b);
        a         = floor(b);
        a         = fact(b);
        a         = b and c;
        a         = b and c and d;
        a         = (b == c) and (b <> c);
        a         = (b == c) and c;
        a         = b and (b <> c);
        a         = b*c and b/c;
        a         = (b+c) and (b-c);
        a         = +b and -c;
        a         = b or c;
        a         = b or c or d;
        a         = (b == c) or (b <> c);
        a         = (b == c) or c;
        a         = b or (b <> c);
        a         = b*c or b/c;
        a         = (b+c) or (b-c);
        a         = +b or -c;
        a         = b xor c;
        a         = b xor c xor d;
        a         = (b == c) xor (b <> c);
        a         = (b == c) xor c;
        a         = b xor (b <> c);
        a         = b*c xor b/c;
        a         = (b+c) xor (b-c);
        a         = +b xor -c;
        a         = not b;
        a         = not exp(b);
        a         = not(b == c);
        a         = not(b <> c);
        a         = not(b > c);
        a         = not(b < c);
        a         = not(b >= c);
        a         = not(b <= c);
        a         = not(b+c);
        a         = not(b-c);
        a         = not(b*c);
        a         = not(b/c);
        a         = not(b and c);
        a         = not(b or c);
        a         = not(b xor c);
        a         = not not b;
        a         = ode(f, t);
        a         = true;
        a         = false;
        a         = pi;
        a         = e;
        a         = sin(b);
        a         = cos(b);
        a         = tan(b);
        a         = sec(b);
        a         = csc(b);
        a         = cot(b);
        a         = sinh(b);
        a         = cosh(b);
        a         = tanh(b);
        a         = sech(b);
        a         = csch(b);
        a         = coth(b);
        a         = asin(b);
        a         = acos(b);
        a         = atan(b);
        a         = asec(b);
        a         = acsc(b);
        a         = acot(b);
        a         = asinh(b);
        a         = acosh(b);
        a         = atanh(b);
        a         = asech(b);
        a         = acsch(b);
        a         = acoth(b);
        ode(f, t) = 3{dimensionless};
    enddef;

    def group as containment for
        comp my_component1 incl
            comp my_component11 incl
                comp my_component111;
                comp my_component112;
            endcomp;
        endcomp;
    enddef;

    def group as containment my_containment for
        comp my_component1 incl
            comp my_component11 incl
                comp my_component111;
            endcomp;

            comp my_component12;
        endcomp;
    enddef;

    def group as encapsulation for
        comp my_component1 incl
            comp my_component11;
            comp my_component12;
        endcomp;

        comp my_component2 incl
            comp my_component21;
        endcomp;
    enddef;

    def group as encapsulation and containment my_containment for
        comp my_component;
    enddef;

    def map between my_component1 and my_component2 for
        vars my_variable1 and my_variable2;
    enddef;
enddef;
